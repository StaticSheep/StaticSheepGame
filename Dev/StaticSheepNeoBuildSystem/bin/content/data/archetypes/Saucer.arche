GameObject
{
  name std::string "Saucer"
  archetype std::string "Saucer"
  Transform
  {
    Translation Vec3
    {
      x_ float 0.000000
      y_ float 0.000000
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 0.500000
      y_ float 0.500000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "saucer.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 1.000000
      Y float 1.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  ParticleSystem
  {
    textureName std::string "White.png"
    m_layer int 1
    m_useZ bool true
    particleLife ParticleOptionShort<float>
    {
      m_startMin float 1.000000
      m_startMax float 1.000000
    }
    directionEase int 1
    direction ParticleOption<Vec3>
    {
      m_startMin Vec3
      {
        x_ float 0.000000
        y_ float 0.000000
        z_ float -1.000000
      }
      m_startMax Vec3
      {
        x_ float 0.000000
        y_ float 0.000000
        z_ float -1.000000
      }
      m_endMin Vec3
      {
        x_ float 0.000000
        y_ float 0.000000
        z_ float -1.000000
      }
      m_endMax Vec3
      {
        x_ float 0.000000
        y_ float 0.000000
        z_ float -1.000000
      }
    }
    angularVelocity ParticleOption<float>
    {
      m_startMin float 0.000000
      m_startMax float 0.000000
      m_endMin float 0.000000
      m_endMax float 0.000000
    }
    scaleEase int 1
    scale ParticleOption<float>
    {
      m_startMin float 10.000000
      m_startMax float 10.000000
      m_endMin float 50.000000
      m_endMax float 50.000000
    }
    colorEase int 1
    color ParticleOption<Vec4>
    {
      m_startMin Vec4
      {
        R float 1.000000
        G float 0.000000
        B float 0.000000
        A float 0.500000
      }
      m_startMax Vec4
      {
        R float 1.000000
        G float 0.000000
        B float 0.000000
        A float 0.500000
      }
      m_endMin Vec4
      {
        R float 1.000000
        G float 0.000000
        B float 0.000000
        A float 0.500000
      }
      m_endMax Vec4
      {
        R float 1.000000
        G float 0.000000
        B float 0.000000
        A float 0.500000
      }
    }
    speedEase int 1
    speed ParticleOption<float>
    {
      m_startMin float 98.000000
      m_startMax float 98.000000
      m_endMin float 98.000000
      m_endMax float 98.000000
    }
  }
  ParticleCircleEmitter
  {
    parentToOwner bool true
    m_innerRadius float 0.000000
    m_outerRadius float 0.000000
    m_spawnOffset Vec3
    {
      x_ float 0.000000
      y_ float 0.000000
      z_ float 0.000000
    }
    m_amount ParticleOptionShort<float>
    {
      m_startMin float 100.000000
      m_startMax float 0.000000
    }
    m_rate ParticleOptionShort<float>
    {
      m_startMin float 30.000000
      m_startMax float 0.000000
    }
    spawning bool false
    timedSpawning bool false
    timed float 0.000000
    outward bool false
    inward bool false
  }
  CircleCollider
  {
    m_radius float 12.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
  GamePad
  {
    GamepadIndex int 0
  }
  AOEDamage
  {
    m_radius float 50.000000
    m_damagePerSecond float 10.000000
    m_shrinks bool false
    m_shrinkTime float 0.200000
    m_shrinkDelay float 0.000000
  }
  Saucer
  {
  }
}
