PhysicsSnappingLand
GameObject
{
  name std::string ""
  archetype std::string ""
  Transform
  {
    Translation Vec3
    {
      x_ float 0.000000
      y_ float -459.230957
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "Default.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 64.000000
      Y float 2.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.010000
    }
  }
  BoxCollider
  {
    m_width float 2048.000000
    m_height float 64.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
}
GameObject
{
  name std::string "Player"
  archetype std::string "Player1"
  Transform
  {
    Translation Vec3
    {
      x_ float 0.000000
      y_ float -327.020477
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  SpineSprite
  {
    atlasName std::string "ninja"
    entityName std::string "ninja"
    sequenceName std::string "idle"
    framerate float 20.000000
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
  }
  BoxCollider
  {
    m_width float 90.000000
    m_height float 128.000000
    m_materialName std::string "NoBounce"
    m_hasCollisionCallback bool true
    m_CollisionGroup std::string "Player1"
  }
  SoundEmitter
  {
  }
  PlayerController
  {
    playerNum int 0
  }
  GamePad
  {
    GamepadIndex int 0
  }
  Cheats
  {
    enabled bool true
  }
}
GameObject
{
  name std::string ""
  archetype std::string ""
  Transform
  {
    Translation Vec3
    {
      x_ float -8.409365
      y_ float 501.412201
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "Default.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 64.000000
      Y float 2.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.010000
    }
  }
  BoxCollider
  {
    m_width float 2048.000000
    m_height float 64.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
}
GameObject
{
  name std::string ""
  archetype std::string ""
  Transform
  {
    Translation Vec3
    {
      x_ float 819.110291
      y_ float 17.335587
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "Default.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 2.000000
      Y float 64.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.010000
    }
  }
  BoxCollider
  {
    m_width float 64.000000
    m_height float 2048.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
}
GameObject
{
  name std::string ""
  archetype std::string ""
  Transform
  {
    Translation Vec3
    {
      x_ float -881.980164
      y_ float 96.852646
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "Default.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 2.000000
      Y float 64.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.010000
    }
  }
  BoxCollider
  {
    m_width float 64.000000
    m_height float 2048.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
}
GameObject
{
  name std::string ""
  archetype std::string ""
  Transform
  {
    Translation Vec3
    {
      x_ float -665.940125
      y_ float -285.018646
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 1.000000
      y_ float 1.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "Default.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 2.000000
      Y float 2.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.010000
    }
  }
  BoxCollider
  {
    m_width float 64.000000
    m_height float 64.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
}
GameObject
{
  name std::string "Pinwheel"
  archetype std::string "Pinwheel"
  Transform
  {
    Translation Vec3
    {
      x_ float -9.610523
      y_ float 123.737549
      z_ float 0.000000
    }
    Rotation float 0.000000
    Scale Vec3
    {
      x_ float 0.500000
      y_ float 10.000000
      z_ float 0.000000
    }
  }
  Sprite
  {
    m_spriteName std::string "screw_block.png"
    m_layer unsignedint 1
    m_flipX bool false
    m_flipY bool false
    m_uvScale bool false
    Color Vec4
    {
      R float 1.000000
      G float 1.000000
      B float 1.000000
      A float 1.000000
    }
    Size Vec2
    {
      X float 1.000000
      Y float 1.000000
    }
    m_origin Vec2
    {
      X float 0.000000
      Y float 0.000000
    }
  }
  PointLight
  {
    m_layer unsignedint 1
    m_brightness LightColor
    {
      R float 1.000000
      G float 0.200000
      B float 0.200000
      A float 0.500000
    }
    m_attenuation LightVec3
    {
      X float 0.010000
      Y float 0.010000
      Z float 0.050000
    }
  }
  BoxCollider
  {
    m_width float 32.000000
    m_height float 640.000000
    m_materialName std::string "Static"
    m_hasCollisionCallback bool false
    m_CollisionGroup std::string ""
  }
  Pinwheel
  {
  }
}
